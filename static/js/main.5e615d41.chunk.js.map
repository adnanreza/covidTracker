{"version":3,"sources":["components/Cards/Cards.module.css","App.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/covid.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","dataNOW","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","console","log","barChart","options","legend","title","display","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","darkMode","fetchedData","setState","this","pref","getInitialMode","localStorage","setItem","JSON","stringify","isReturningUser","savedMode","parse","getItem","userPrefersDark","getPrefColorScheme","window","matchMedia","matches","theme","lightMode","image","src","covid","alt","toggleContainer","style","toggle","checked","type","checkbox","id","htmlFor","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,mBCAnKD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,SAAW,sBAAsB,MAAQ,mBAAmB,OAAS,oBAAoB,SAAW,sBAAsB,gBAAkB,6BAA6B,UAAY,yB,4NCmG3NC,EA7FD,SAAC,GAA4D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,WACrD,OAAKH,EAIH,yBAAKI,UAAU,oBACb,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,UAClC,kBAACH,EAAA,EAAD,CACEI,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJT,UAAWU,IAAGC,IAAOC,KAAMD,IAAOE,WAElC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKxB,EAAUyB,MACfC,SAAU,EACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAKzB,GAAY0B,YAExB,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,wCAKJ,kBAACjB,EAAA,EAAD,CACEI,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJT,UAAWU,IAAGC,IAAOC,KAAMD,IAAOd,YAElC,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,cAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKvB,EAAUwB,MACfC,SAAU,EACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAKzB,GAAY0B,YAExB,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,wCAKJ,kBAACjB,EAAA,EAAD,CACEI,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJT,UAAWU,IAAGC,IAAOC,KAAMD,IAAOb,SAElC,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKtB,EAAOuB,MACZC,SAAU,EACVC,UAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAKzB,GAAY0B,YAExB,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,2CAjFD,c,yBCPLQ,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,6BAAAC,EAAA,6DACnBC,EAAgBJ,EAChBE,IACFE,EAAa,UAAMJ,EAAN,sBAAuBE,IAHf,kBAQXG,IAAMC,IAAIF,GARC,2BAOnBnC,KAAQC,EAPW,EAOXA,UAAWC,EAPA,EAOAA,UAAWC,EAPX,EAOWA,OAAQC,EAPnB,EAOmBA,WAElCkC,EAAe,CACnBrC,YACAC,YACAC,SACAC,cAbmB,kBAedkC,GAfc,2HAAH,sDAqBTC,EAAc,uCAAG,gCAAAL,EAAA,+EAEHE,IAAMC,IAAN,UAAaN,EAAb,WAFG,uBAElB/B,EAFkB,EAElBA,KAEFsC,EAAetC,EAAKwC,KAAI,SAACC,GAAD,MAAgB,CAC5CxC,UAAWwC,EAAUxC,UAAUyC,MAC/BvC,OAAQsC,EAAUtC,OAAOuC,MACzBC,KAAMF,EAAUG,eAPQ,kBASnBN,GATmB,wHAAH,qDAedO,EAAc,uCAAG,8BAAAX,EAAA,+EAIhBE,IAAMC,IAAN,UAAaN,EAAb,eAJgB,uBAGhBe,EAHgB,EAGxB9C,KAAQ8C,UAHgB,kBAMnBA,EAAUN,KAAI,SAACP,GAAD,OAAaA,EAAQc,SANhB,wHAAH,qD,yBC8BZC,EAhED,SAAC,GAAyD,IAAD,IAAtDhD,KAAQC,EAA8C,EAA9CA,UAAWE,EAAmC,EAAnCA,OAAQD,EAA2B,EAA3BA,UAAa+B,EAAc,EAAdA,QAAc,EACnCgB,mBAAS,IAD0B,mBAC9DR,EAD8D,KACnDS,EADmD,KAGrEC,qBAAU,YACM,uCAAG,4BAAAjB,EAAA,sEACOK,IADP,OACTa,EADS,OAEfF,EAAaE,GAFE,2CAAH,qDAKdC,KACC,IAEH,IAAMC,EAAYb,EAAUc,OAC1B,kBAAC,IAAD,CACEvD,KAAM,CACJwD,OAAQf,EAAUD,KAAI,qBAAGG,QACzBc,SAAU,CACR,CACEzD,KAAMyC,EAAUD,KAAI,SAACxC,GAAD,OAAUA,EAAKC,aACnCyD,MAAO,WACPC,YAAa,UACbC,MAAM,GAER,CACE5D,KAAMyC,EAAUD,KAAI,SAACxC,GAAD,OAAUA,EAAKG,UACnCuD,MAAO,SACPC,YAAa,MACbE,gBAAiB,uBACjBD,MAAM,OAKZ,KACJE,QAAQC,IAAI9D,EAAWC,EAAWC,GAElC,IAAM6D,EAAW/D,EACf,kBAAC,IAAD,CACED,KAAM,CACJwD,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,MAAO,SACPG,gBAAiB,CACf,uBACA,uBACA,wBAEF7D,KAAM,CAACC,EAAUyB,MAAOxB,EAAUwB,MAAOvB,EAAOuB,UAItDuC,QAAS,CACPC,QAAQ,EACRC,MAAO,CAAEC,SAAS,EAAMC,KAAK,oBAAD,OAAsBpC,OAGpD,KAEJ,OACE,yBAAK5B,UAAWW,IAAOT,WAAY0B,EAAU+B,EAAWV,I,mCChC7CgB,EA3BO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACDtB,mBAAS,IADR,mBAC1CuB,EAD0C,KACxBC,EADwB,KAUjD,OAPAtB,qBAAU,YACM,uCAAG,sBAAAjB,EAAA,kEACfuC,EADe,SACW5B,IADX,6EAAH,qDAGdQ,KACC,CAACoB,IAGF,kBAACC,EAAA,EAAD,CAAarE,UAAWW,IAAO2D,aAC7B,kBAACC,EAAA,EAAD,CACEC,aAAa,GACbC,SAAU,SAACC,GAAD,OAAOR,EAAoBQ,EAAEC,OAAOtD,SAE9C,4BAAQA,MAAM,IAAd,UACC8C,EAAiBhC,KAAI,SAACP,EAASgD,GAAV,OACpB,4BAAQC,IAAKD,EAAGvD,MAAOO,GACpBA,S,kCCuDEkD,E,4MAxEbC,MAAQ,CACNpF,KAAM,GACNiC,QAAS,GACToD,UAAU,G,EAkCZd,oB,uCAAsB,WAAOtC,GAAP,eAAAC,EAAA,sEACMF,EAAUC,GADhB,OACdqD,EADc,OAEpB,EAAKC,SAAS,CAAEvF,KAAMsF,EAAarD,QAASA,IAFxB,2C,wPA9BMD,I,OAApBsD,E,OACNE,KAAKD,SAAS,CAAEvF,KAAMsF,I,iJAItB,IAAMG,EAAOD,KAAKE,iBAClBF,KAAKD,SAAS,CAAEF,SAAUI,IAC1BE,aAAaC,QAAQ,OAAQC,KAAKC,UAAUL,M,uCAI5C,IAAMM,EAAkB,SAAUJ,aAC5BK,EAAYH,KAAKI,MAAMN,aAAaO,QAAQ,SAC5CC,EAAkBX,KAAKY,qBAE7B,OAAIL,EACKC,IACEG,I,2CASX,GAAKE,OAAOC,WACZ,OAAOD,OAAOC,WAAW,gCAAgCC,U,+BAQjD,IAAD,SAC6Bf,KAAKJ,MAAjCpF,EADD,EACCA,KAAMiC,EADP,EACOA,QAASoD,EADhB,EACgBA,SACjBmB,EAAQnB,EAAWrE,IAAOqE,SAAWrE,IAAOyF,UAClD,OACE,yBAAKpG,UAAWmG,GACd,yBAAKnG,UAAWW,IAAO0F,MAAOC,IAAKC,IAAOC,IAAI,YAC9C,yBAAKxG,UAAWW,IAAO8F,iBACrB,0BAAMC,MAAO,CAAE1F,MAAOgE,EAAW,OAAS,WAA1C,gBACA,0BAAMhF,UAAWW,IAAOgG,QACtB,2BACEC,QAAS5B,EACTP,SAAU,kBAAM,EAAKS,SAAS,CAAEF,UAAWA,KAC3C6B,KAAK,WACL7G,UAAWW,IAAOmG,SAClBC,GAAG,aAEL,2BAAOC,QAAQ,cAEjB,0BAAMN,MAAO,CAAE1F,MAAOgE,EAAW,YAAc,SAA/C,WAEF,kBAAC,EAAD,CAAOrF,KAAMA,IACb,kBAAC,EAAD,CACEuE,oBAAqBiB,KAAKjB,sBAE5B,kBAAC,EAAD,CAAOvE,KAAMA,EAAMiC,QAASA,S,GAnElBqF,IAAMC,WCHxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBCJjD9H,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCDhCD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.5e615d41.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2cnYf\",\"card\":\"Cards_card__2yM7b\",\"infected\":\"Cards_infected__rhrEY\",\"recovered\":\"Cards_recovered__ePVpv\",\"deaths\":\"Cards_deaths__3FGM9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lightMode\":\"App_lightMode__2XILc\",\"darkMode\":\"App_darkMode__2MEay\",\"image\":\"App_image__2Mk-w\",\"toggle\":\"App_toggle__3TZZy\",\"checkbox\":\"App_checkbox__3Jhx5\",\"toggleContainer\":\"App_toggleContainer__2y9tZ\",\"container\":\"App_container__2oFxA\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return 'loading...';\r\n  }\r\n  return (\r\n    <div className='styles container'>\r\n      <Grid container spacing={3} justify='center'>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color='textSecondary' gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2}\r\n                separator=','\r\n              ></CountUp>\r\n            </Typography>\r\n            <Typography color='textSecondary'>\r\n              {new Date(lastUpdate).toString()}\r\n            </Typography>\r\n            <Typography variant='body2'>\r\n              Number of active cases of covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color='textSecondary' gutterBottom>\r\n              Recoveries\r\n            </Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2}\r\n                separator=','\r\n              ></CountUp>\r\n            </Typography>\r\n            <Typography color='textSecondary'>\r\n              {new Date(lastUpdate).toString()}\r\n            </Typography>\r\n            <Typography variant='body2'>\r\n              Number of recoveries from covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color='textSecondary' gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2}\r\n                separator=','\r\n              ></CountUp>\r\n            </Typography>\r\n            <Typography color='textSecondary'>\r\n              {new Date(lastUpdate).toString()}\r\n            </Typography>\r\n            <Typography variant='body2'>\r\n              Number of deaths caused by covid-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n    const modifiedData = {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n    return modifiedData;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\r\n  const [dailyData, setDailyData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const dataNOW = await fetchDailyData();\r\n      setDailyData(dataNOW);\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n  console.log(confirmed, recovered, deaths);\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: ['Infected', 'Recovered', 'Deaths'],\r\n        datasets: [\r\n          {\r\n            label: 'People',\r\n            backgroundColor: [\r\n              'rgba(0, 0, 255, 0.5)',\r\n              'rgba(0, 255, 0, 0.5)',\r\n              'rgba(0, 0, 255, 0.5)',\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: false,\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    ></Bar>\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=''\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=''>Global</option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from 'react';\r\n\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\n\r\nimport covid from './images/covid.png';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n    darkMode: false,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  componentWillMount() {\r\n    const pref = this.getInitialMode();\r\n    this.setState({ darkMode: pref });\r\n    localStorage.setItem('dark', JSON.stringify(pref));\r\n  }\r\n\r\n  getInitialMode() {\r\n    const isReturningUser = 'dark' in localStorage;\r\n    const savedMode = JSON.parse(localStorage.getItem('dark'));\r\n    const userPrefersDark = this.getPrefColorScheme();\r\n    // if mode was saved -> dark or light\r\n    if (isReturningUser) {\r\n      return savedMode;\r\n    } else if (userPrefersDark) {\r\n      return true;\r\n    } else {\r\n      // if prefcolorscheme -> dark -> dark otherwise light\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getPrefColorScheme() {\r\n    if (!window.matchMedia) return;\r\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n\r\n  render() {\r\n    const { data, country, darkMode } = this.state;\r\n    const theme = darkMode ? styles.darkMode : styles.lightMode;\r\n    return (\r\n      <div className={theme}>\r\n        <img className={styles.image} src={covid} alt='COVID19' />\r\n        <div className={styles.toggleContainer}>\r\n          <span style={{ color: darkMode ? 'grey' : 'yellow' }}>🌣</span>\r\n          <span className={styles.toggle}>\r\n            <input\r\n              checked={darkMode}\r\n              onChange={() => this.setState({ darkMode: !darkMode })}\r\n              type='checkbox'\r\n              className={styles.checkbox}\r\n              id='checkbox'\r\n            />\r\n            <label htmlFor='checkbox' />\r\n          </span>\r\n          <span style={{ color: darkMode ? 'slateblue' : 'gray' }}>☽</span>\r\n        </div>\r\n        <Cards data={data}></Cards>\r\n        <CountryPicker\r\n          handleCountryChange={this.handleCountryChange}\r\n        ></CountryPicker>\r\n        <Chart data={data} country={country}></Chart>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__pqiuT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2lahn\"};","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";"],"sourceRoot":""}